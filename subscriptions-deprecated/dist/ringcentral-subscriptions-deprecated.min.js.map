{"version":3,"file":"ringcentral-subscriptions-deprecated.min.js","mappings":"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","sources":["webpack://RingCentral.SubscriptionsDeprecated/webpack/universalModuleDefinition","webpack://RingCentral.SubscriptionsDeprecated/./src/Subscriptions.ts","webpack://RingCentral.SubscriptionsDeprecated/./src/subscription/CachedSubscription.ts","webpack://RingCentral.SubscriptionsDeprecated/./src/subscription/Subscription.ts","webpack://RingCentral.SubscriptionsDeprecated/external umd {\"commonjs\":\"@ringcentral/sdk\",\"commonjs2\":\"@ringcentral/sdk\",\"amd\":\"ringcentral\",\"root\":\"RingCentral\"}","webpack://RingCentral.SubscriptionsDeprecated/external umd {\"commonjs\":\"pubnub\",\"commonjs2\":\"pubnub\",\"amd\":\"pubnub\",\"root\":\"PubNub\"}","webpack://RingCentral.SubscriptionsDeprecated/webpack/bootstrap","webpack://RingCentral.SubscriptionsDeprecated/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@ringcentral/sdk\"), require(\"pubnub\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ringcentral\", \"pubnub\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RingCentral\"] = factory(require(\"@ringcentral/sdk\"), require(\"pubnub\"));\n\telse\n\t\troot[\"RingCentral\"] = root[\"RingCentral\"] || {}, root[\"RingCentral\"][\"SubscriptionsDeprecated\"] = factory(root[\"RingCentral\"], root[\"PubNub\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__180__, __WEBPACK_EXTERNAL_MODULE__10__) => {\nreturn ","import PubNubDefault from 'pubnub';\nimport {SDK} from '@ringcentral/sdk';\nimport Subscription, {SubscriptionOptions} from './subscription/Subscription';\nimport CachedSubscription, {CachedSubscriptionOptions} from './subscription/CachedSubscription';\n\nexport {SubscriptionOptions, CachedSubscriptionOptions};\n\nexport class Subscriptions {\n    private _sdk: SDK;\n\n    private _PubNub: any; // typeof PubNub;\n\n    public constructor({sdk, PubNub = PubNubDefault}: SubscriptionsOptions) {\n        this._sdk = sdk;\n        this._PubNub = PubNub;\n        // eslint-disable-next-line no-console\n        console.warn('PubNub support is deprecated. Please migrate your application to WebSockets.');\n    }\n\n    public createSubscription({pollInterval, renewHandicapMs}: SubscriptionOptions = {}) {\n        return new Subscription({\n            pollInterval,\n            renewHandicapMs,\n            sdk: this._sdk,\n            PubNub: this._PubNub,\n        });\n    }\n\n    public createCachedSubscription({cacheKey, pollInterval, renewHandicapMs}: CachedSubscriptionOptions) {\n        return new CachedSubscription({\n            cacheKey,\n            pollInterval,\n            renewHandicapMs,\n            sdk: this._sdk,\n            PubNub: this._PubNub,\n        });\n    }\n\n    public getPubNub() {\n        return this._PubNub;\n    }\n}\n\nexport interface SubscriptionsOptions {\n    sdk: SDK;\n    PubNub?: typeof PubNubDefault;\n}\n\nexport default Subscriptions;\n","import Subscription, {SubscriptionOptions, SubscriptionOptionsConstructor} from './Subscription';\n\nexport default class CachedSubscription extends Subscription {\n    protected _cacheKey: string;\n\n    public constructor({sdk, PubNub, cacheKey, pollInterval, renewHandicapMs}: CachedSubscriptionOptionsConstructor) {\n        super({sdk, PubNub, pollInterval, renewHandicapMs});\n\n        if (!cacheKey) {throw new Error('Cached Subscription requires cacheKey parameter to be defined');}\n\n        this._cacheKey = cacheKey;\n    }\n\n    public subscription() {\n        return this._sdk.cache().getItemSync(this._cacheKey) || {};\n    }\n\n    protected _setSubscription(subscription) {\n        this._sdk.cache().setItemSync(this._cacheKey, subscription);\n        return this;\n    }\n\n    /**\n     * This function checks whether there are any pre-defined eventFilters in cache and if not -- uses provided as defaults\n     */\n    public restore(events: string[]) {\n        if (!this.eventFilters().length) {\n            this.setEventFilters(events);\n        }\n\n        return this;\n    }\n}\n\nexport interface CachedSubscriptionOptions extends SubscriptionOptions {\n    cacheKey: string;\n}\n\nexport interface CachedSubscriptionOptionsConstructor\n    extends SubscriptionOptionsConstructor,\n        CachedSubscriptionOptions {}\n","import PubNubDefault from 'pubnub';\n\nimport {\n    ApiError,\n    SDK,\n} from '@ringcentral/sdk';\n\n// detect ISO 8601 format string with +00[:00] timezone notations\nconst ISO_REG_EXP = /(\\+[\\d]{2}):?([\\d]{2})?$/;\n\nconst buildIEFriendlyString = (match, $1, $2) => `${$1}:${$2 || '00'}`;\n\nconst parseISOString = (time: string | number) => {\n    time = time || 0;\n    if (typeof time === 'string') {\n        return Date.parse(time.replace(ISO_REG_EXP, buildIEFriendlyString));\n    }\n    return time;\n};\n\ndeclare class ActualPubNub extends PubNubDefault {\n    public removeAllListeners: any;\n\n    public decrypt: any;\n}\n\nexport enum events {\n    notification = 'notification',\n    removeSuccess = 'removeSuccess',\n    removeError = 'removeError',\n    renewSuccess = 'renewSuccess',\n    renewError = 'renewError',\n    subscribeSuccess = 'subscribeSuccess',\n    subscribeError = 'subscribeError',\n    automaticRenewSuccess = 'automaticRenewSuccess',\n    automaticRenewError = 'automaticRenewError',\n}\n\nexport default class Subscription extends SDK.EventEmitter {\n    public events = events;\n\n    protected _sdk: SDK;\n\n    protected _PubNub: typeof ActualPubNub;\n\n    protected _pollInterval: number;\n\n    protected _renewHandicapMs: number;\n\n    protected _pubnub: ActualPubNub = null;\n\n    protected _pubnubLastChannel: string = null;\n\n    protected _pubnubLastSubscribeKey: string = null;\n\n    protected _timeout: any = null;\n\n    protected _subscription: SubscriptionData = null;\n\n    protected _automaticRenewPromise: Promise<void> = null;\n\n    public constructor({\n        sdk,\n        PubNub,\n        pollInterval = 10 * 1000,\n        renewHandicapMs = 2 * 60 * 1000,\n    }: SubscriptionOptionsConstructor) {\n        super();\n\n        this._sdk = sdk;\n        this._PubNub = PubNub;\n        this._pollInterval = pollInterval;\n        this._renewHandicapMs = renewHandicapMs;\n    }\n\n    public on(event: events.notification, listener: (body: any) => void);\n    public on(event: events.removeSuccess, listener: (response: Response) => void);\n    public on(event: events.removeError, listener: (error: ApiError | Error) => void);\n    public on(event: events.renewSuccess, listener: (response: Response) => void);\n    public on(event: events.renewError, listener: (error: ApiError | Error) => void);\n    public on(event: events.automaticRenewSuccess, listener: (response: Response) => void);\n    public on(event: events.automaticRenewError, listener: (error: ApiError | Error) => void);\n    public on(event: events.subscribeSuccess, listener: (response: Response) => void);\n    public on(event: events.subscribeError, listener: (error: ApiError | Error) => void);\n    public on(event: string, listener: (...args) => void) {\n        return super.on(event, listener);\n    }\n\n    public subscribed() {\n        const subscription = this.subscription();\n\n        return !!(\n            subscription.id &&\n            subscription.deliveryMode &&\n            subscription.deliveryMode.subscriberKey &&\n            subscription.deliveryMode.address\n        );\n    }\n\n    public alive() {\n        return this.subscribed() && Date.now() < this.expirationTime();\n    }\n\n    public expired() {\n        if (!this.subscribed()) {return true;}\n        return !this.subscribed() || Date.now() > parseISOString(this.subscription().expirationTime);\n    }\n\n    public expirationTime() {\n        return parseISOString(this.subscription().expirationTime) - this._renewHandicapMs;\n    }\n\n    public setSubscription(subscription: SubscriptionData) {\n        subscription = subscription || {};\n\n        this._clearTimeout();\n        this._setSubscription(subscription);\n        this._subscribeAtPubNub();\n        this._setTimeout();\n\n        return this;\n    }\n\n    public subscription() {\n        const _subscription = this._subscription || {};\n        return {..._subscription};\n    }\n\n    public pubnub() {\n        return this._pubnub;\n    }\n\n    /**\n     * Creates or updates subscription if there is an active one\n     */\n    public async register(): Promise<Response> {\n        if (this.alive()) {\n            return this.renew();\n        }\n        return this.subscribe();\n    }\n\n    public eventFilters() {\n        return this.subscription().eventFilters || [];\n    }\n\n    public addEventFilters(eventFilters: string[]) {\n        this.setEventFilters(this.eventFilters().concat(eventFilters));\n        return this;\n    }\n\n    /**\n     * @param {string[]} eventFilters\n     * @return {Subscription}\n     */\n    public setEventFilters(eventFilters) {\n        const subscription = this.subscription();\n        subscription.eventFilters = eventFilters;\n        this._setSubscription(subscription);\n        return this;\n    }\n\n    public async subscribe(): Promise<Response> {\n        try {\n            this._clearTimeout();\n\n            if (!this.eventFilters().length) {throw new Error('Events are undefined');}\n\n            const response = await this._sdk.platform().post('/restapi/v1.0/subscription', {\n                eventFilters: this._getFullEventFilters(),\n                deliveryMode: {\n                    transportType: 'PubNub',\n                },\n            });\n\n            const json = await response.json();\n\n            this.setSubscription(json).emit(this.events.subscribeSuccess, response);\n\n            return response;\n        } catch (e) {\n            // `reset` will remove pubnub instance.\n            // so if network is broken for a long time, pubnub will be removed. And client can not receive notification anymore.\n            this.reset().emit(this.events.subscribeError, e);\n\n            throw e;\n        }\n    }\n\n    public async renew(): Promise<Response> {\n        try {\n            this._clearTimeout();\n\n            if (!this.subscribed()) {throw new Error('No subscription');}\n\n            if (!this.eventFilters().length) {throw new Error('Events are undefined');}\n\n            const response = await this._sdk.platform().put(`/restapi/v1.0/subscription/${this.subscription().id}`, {\n                eventFilters: this._getFullEventFilters(),\n            });\n\n            const json = await response.json();\n\n            this.setSubscription(json).emit(this.events.renewSuccess, response);\n\n            return response;\n        } catch (e) {\n            // `reset` will remove pubnub instance.\n            // so if network is broken for a long time, pubnub will be removed. And client can not receive notification anymore.\n            this.reset().emit(this.events.renewError, e);\n\n            throw e;\n        }\n    }\n\n    public async remove(): Promise<Response> {\n        try {\n            if (!this.subscribed()) {throw new Error('No subscription');}\n\n            const response = await this._sdk.platform().delete(`/restapi/v1.0/subscription/${this.subscription().id}`);\n\n            this.reset().emit(this.events.removeSuccess, response);\n\n            return response;\n        } catch (e) {\n            this.emit(this.events.removeError, e);\n\n            throw e;\n        }\n    }\n\n    public resubscribe(): Promise<Response> {\n        const filters = this.eventFilters();\n        return this.reset()\n            .setEventFilters(filters)\n            .subscribe();\n    }\n\n    /**\n     * Remove subscription and disconnect from PubNub\n     * This method resets subscription at client side but backend is not notified\n     */\n    public reset() {\n        this._clearTimeout();\n        this._unsubscribeAtPubNub();\n        this._setSubscription(null);\n        return this;\n    }\n\n    /**\n     * @param subscription\n     * @private\n     */\n    protected _setSubscription(subscription: SubscriptionData) {\n        this._subscription = {\n            ...subscription,\n        };\n        return this;\n    }\n\n    /**\n     * @return {string[]}\n     * @private\n     */\n    public _getFullEventFilters() {\n        return this.eventFilters().map(event => this._sdk.platform().createUrl(event));\n    }\n\n    private async _automaticRenewHandler() {\n        try {\n            if (this.alive()) {return;}\n\n            this._clearTimeout();\n\n            const res = await (this.expired() ? this.subscribe() : this.renew());\n\n            this.emit(this.events.automaticRenewSuccess, res);\n        } catch (e) {\n            this.emit(this.events.automaticRenewError, e);\n        }\n    }\n\n    /**\n     * @return {Subscription}\n     * @private\n     */\n    public _setTimeout() {\n        this._clearTimeout();\n\n        if (!this.alive()) {throw new Error('Subscription is not alive');}\n\n        this._timeout = setInterval(async () => {\n            if (!this._automaticRenewPromise) {\n                this._automaticRenewPromise = this._automaticRenewHandler();\n            }\n            await this._automaticRenewPromise;\n            this._automaticRenewPromise = null;\n        }, this._pollInterval);\n\n        return this;\n    }\n\n    // check if app is automatic renewing\n    public automaticRenewing(): Promise<void> {\n        return this._automaticRenewPromise;\n    }\n\n    /**\n     * @return {Subscription}\n     * @private\n     */\n    public _clearTimeout() {\n        clearInterval(this._timeout);\n        return this;\n    }\n\n    public _decrypt(message) {\n        if (!this.subscribed()) {throw new Error('No subscription');}\n\n        if (this.subscription().deliveryMode.encryptionKey) {\n            //FIXME decrypt is not described in DTS\n            message = this._pubnub.decrypt(message, this.subscription().deliveryMode.encryptionKey, {\n                encryptKey: false,\n                keyEncoding: 'base64',\n                keyLength: 128,\n                mode: 'ecb',\n            });\n        }\n\n        return message;\n    }\n\n    private _notify(message) {\n        this.emit(this.events.notification, this._decrypt(message));\n        return this;\n    }\n\n    private _subscribeAtPubNub() {\n        if (!this.alive()) {throw new Error('Subscription is not alive');}\n\n        const {address, subscriberKey} = this.subscription().deliveryMode;\n\n        if (this._pubnub) {\n            if (this._pubnubLastChannel === address) {\n                // Nothing to update, keep listening to same channel\n                return this;\n            }\n            if (this._pubnubLastSubscribeKey && this._pubnubLastSubscribeKey !== subscriberKey) {\n                // Subscribe key changed, need to reset everything\n                this._unsubscribeAtPubNub();\n            } else if (this._pubnubLastChannel) {\n                // Need to subscribe to new channel\n                this._pubnub.unsubscribeAll();\n            }\n        }\n\n        if (!this._pubnub) {\n            this._pubnubLastSubscribeKey = subscriberKey;\n\n            const PubNub: any = this._PubNub;\n\n            this._pubnub = new PubNub({\n                ssl: true,\n                restore: true,\n                subscribeKey: subscriberKey,\n                useRandomIVs: false,\n            });\n\n            this._pubnub.addListener({\n                status: statusEvent => {},\n                message: m => this._notify(m.message),\n            });\n        }\n\n        this._pubnubLastChannel = address;\n        this._pubnub.subscribe({channels: [address]});\n\n        return this;\n    }\n\n    private _unsubscribeAtPubNub() {\n        if (!this.subscribed() || !this._pubnub) {return this;}\n\n        this._pubnub.unsubscribeAll();\n        this._pubnub.removeAllListeners();\n\n        this._pubnubLastSubscribeKey = null;\n        this._pubnubLastChannel = null;\n        this._pubnub = null;\n\n        return this;\n    }\n\n    // Allow to force rebuild pubnub connection\n    public async resubscribeAtPubNub(): Promise<Response> {\n        this._unsubscribeAtPubNub();\n        return this.register();\n    }\n}\n\nexport interface SubscriptionOptions {\n    pollInterval?: number;\n    renewHandicapMs?: number;\n}\n\nexport interface SubscriptionOptionsConstructor extends SubscriptionOptions {\n    sdk: SDK;\n    PubNub: typeof ActualPubNub;\n}\n\nexport interface DeliveryMode {\n    transportType?: string;\n    encryption?: string;\n    address?: string;\n    subscriberKey?: string;\n    encryptionKey?: string;\n    secretKey?: string;\n}\n\nexport interface SubscriptionData {\n    id?: string;\n    uri?: string;\n    eventFilters?: string[];\n    expirationTime?: string; // Format: 2014-03-12T19:54:35.613+0000\n    expiresIn?: number;\n    deliveryMode?: DeliveryMode;\n    creationTime?: string;\n    status?: string; //eslint-disable-line\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__180__;","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(702);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__180__","__WEBPACK_EXTERNAL_MODULE__10__","sdk","PubNub","this","_sdk","_PubNub","console","warn","createSubscription","pollInterval","renewHandicapMs","createCachedSubscription","cacheKey","getPubNub","Subscriptions","Error","_cacheKey","subscription","cache","getItemSync","_setSubscription","setItemSync","restore","events","eventFilters","length","setEventFilters","ISO_REG_EXP","buildIEFriendlyString","match","$1","$2","parseISOString","time","Date","parse","replace","_pubnub","_pubnubLastChannel","_pubnubLastSubscribeKey","_timeout","_subscription","_automaticRenewPromise","_pollInterval","_renewHandicapMs","on","event","listener","subscribed","id","deliveryMode","subscriberKey","address","alive","now","expirationTime","expired","setSubscription","_clearTimeout","_subscribeAtPubNub","_setTimeout","pubnub","register","renew","subscribe","addEventFilters","concat","platform","post","_getFullEventFilters","transportType","response","json","emit","subscribeSuccess","reset","subscribeError","put","renewSuccess","renewError","remove","delete","removeSuccess","removeError","resubscribe","filters","_unsubscribeAtPubNub","map","createUrl","_automaticRenewHandler","res","automaticRenewSuccess","automaticRenewError","setInterval","automaticRenewing","clearInterval","_decrypt","message","encryptionKey","decrypt","encryptKey","keyEncoding","keyLength","mode","_notify","notification","unsubscribeAll","ssl","subscribeKey","useRandomIVs","addListener","status","statusEvent","m","channels","removeAllListeners","resubscribeAtPubNub","SDK","EventEmitter","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}